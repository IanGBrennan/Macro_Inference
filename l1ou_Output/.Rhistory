current.taxon <- subset(prodata, prodata$species == taxon.names[1]) # subset a single taxon's data
current.taxon
mean(current.taxon[,"wood"])
head(prodata)
class(current.taxon[,"wood"])
class(current.taxon[,"lma"])
prodata <- read.csv("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Trait_Data/Protea.EVERYsample.csv", header=T)
taxon.names <- unique(prodata$species) # get each unique species name
species.means <- NULL # make an empty data frame
for (h in 1:length(taxon.names)) {
current.taxon <- subset(prodata, prodata$species == taxon.names[h]) # subset a single taxon's data
#base <- current.taxon[1,1:2] # save the tree name and species name
base <- current.taxon[1,1]
means <- as.data.frame(lapply(current.taxon[,2:6], mean)) # get measurement means
log.means <- log(means) # log the means
full <- cbind(base, log.means) # bind names and means together
species.means <- rbind(species.means, full) # add it to the growing list
}
head(species.means)
prodata[,"wood"] <- as.numeric(as.character(prodata[,"wood"]))
class(prodata[,"wood"])
head(prodata)
taxon.names <- unique(prodata$species) # get each unique species name
species.means <- NULL # make an empty data frame
for (h in 1:length(taxon.names)) {
current.taxon <- subset(prodata, prodata$species == taxon.names[h]) # subset a single taxon's data
#base <- current.taxon[1,1:2] # save the tree name and species name
base <- current.taxon[1,1]
means <- as.data.frame(lapply(current.taxon[,2:6], mean)) # get measurement means
log.means <- log(means) # log the means
full <- cbind(base, log.means) # bind names and means together
species.means <- rbind(species.means, full) # add it to the growing list
}
write.csv(species.means, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Trait_Data/Protea.RAW.sp.means.csv")
astral.raxml <- read.tree("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T222_Elapidae/Elapid_macroevolution/Protea_Files/Protea.ASTRAL.RAxML.SCALED.tre")
astral.raxml
astral.raxml[[1]]$tip.label
raxml.concat <- read.tree("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T222_Elapidae/Elapid_macroevolution/Protea_Files/Protea.RAxML.concatenated.SCALED.tre")
starbeast    <- read.nexus("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T222_Elapidae/Elapid_macroevolution/Protea_Files/Protea.starBEAST.trimmed.trees")
astralbeast  <- read.nexus("/Users/Ian/Google.Drive/ANU Herp Work/Lemmon Projects/T222_Elapidae/Elapid_macroevolution/Protea_Files/Protea.ASTRAL.starBEAST.TRIMMED.SCALED.trees")
raxml.concat[[1]]$tip.label
starbeast[[1]]$tip.label
astralbeast[[1]]$tip.label
species.means
rownames(species.means) <- species.means$base
name.check(astral.raxml[[1]], species.means)
name.check(starbeast[[1]], species.means)
names.list <- as.data.frame(astral.raxml[[1]]$tip.label)
names.list
sort(names.list)
sort(names.list[,1])
names.list <- sort(names.list[,1])
names.list
names.list <- as.data.frame(names.list)
names.list
raxml.concat[[1]]$tip.label
names.list <- as.data.frame(sort(raxml.concat[[1]]$tip.label))
names.list
test <- as.data.frame(sort(starbeast[[1]]$tip.label))
test
names.list <- cbind(names.list, test)
names.list
colnames(names.list) <- c("full", "short")
trees
trees[[1]]$tip.label
trees[[1]]$tip.label[1]
starbeast[[1]]$tip.label[1]
raxml.concat[[1]]$tip.label[1]
starbeast[[1]]$tip.label==names.list[1]
starbeast[[1]]$tip.label==names.list[,1][1]
names.list[,1][1]
which(starbeast[[1]]$tip.label==names.list[,2])
names.list[,2]
starbeast[[1]]$tip.label
test <- sort(starbeast[[1]]$tip.label)
test
test[[1]]
starbeast[[1]]$tip.label==test[[1]]
test <- raxml.concat[[1]]
outtest <- sub.tip.label(test, names.list)
library(phylotools)
outtest <- sub.tip.label(test, names.list)
outtest
plot(test)
plot(test)
plot(outtest)
sub.tip.label()
new.trees <- lapply(raxml.concat, sub.tip.label, names.list)
class(new.trees) <- "multiPhylo"
plot(new.trees)
astral.raxml[[1]]
test <- astral.raxml[[1]]
outtest <- sub.tip.label(test, names.list)
outtest
write.nexus(new.trees, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.RAxML.Concat.trees")
test
new.trees[[1]]
new.trees <- lapply(astral.raxml, sub.tip.label, names.list)
class(new.trees) <- "multiPhylo"
plot(new.trees)
write.nexus(new.trees, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.ASTRAL.RAxML.trees")
read.nexus(file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.starBEAST.trimmed.trees")
sb <- read.nexus(file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.starBEAST.trimmed.trees")
plot(sb)
sb <- read.nexus(file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.starBEAST.trimmed.trees")
write.nexus(sb file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.starBEAST.trimmed.trees")
write.nexus(sb, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.starBEAST.trimmed.trees")
dataz <- read.csv("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Trait_Data/Protea.RAW.sp.means.csv", header=T)
name.check(new.trees[[1]], dataz)
dataz <- read.csv("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Trait_Data/Protea.RAW.sp.means.csv", header=T, row.names=1)
name.check(new.trees[[1]], dataz)
dataz <- read.csv("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Trait_Data/Protea.RAW.sp.means.csv", header=T, row.names=1)
name.check(new.trees[[1]], dataz)
raxml.concat[1]
raxml.concat[[1]]
astral.raxml[[1]]
astral.raxml <- read.nexus(/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.ASTRAL.RAxML.trees)
astral.raxml <- read.nexus("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.ASTRAL.RAxML.trees")
setdiff(astral.raxml[[1]]$tip.label, new.trees[[1]]$tip.label)
new.trees$tip.label
new.trees[[1]]$tip.label
setdiff(astral.raxml[[1]]$tip.label, raxml.concat[[1]]$tip.label)
new.trees <- lapply(raxml.concat, sub.tip.label, names.list)
setdiff(astral.raxml[[1]]$tip.label, new.trees[[1]]$tip.label)
class(new.trees) <- "multiPhylo"
setdiff(astral.raxml[[1]]$tip.label, new.trees[[1]]$tip.label)
new.trees[[1]]
setdiff(new.trees[[1]]$tip.label, astral.raxml[[1]]$tip.label)
raxml.concat[[1]]
astral.raxml[[1]]
trees=astral.raxml
depths <- seq(0.3,0.9, 0.01)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="Myrmecobiidae_Myrmecobius_fasciatus"))])
}
trees[[1]]$tip.label
depths <- seq(0.3,0.9, 0.01)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="Myrmecobiidae_Myrmecobius_fasciatus"))])
}
depths
at.depth
depths <- seq(0.3,0.9, 0.01)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
for (i in 1:length(trees)) {
length(trees[[i]]$tip.label)
}
for (i in 1:length(trees)) {
print(length(trees[[i]]$tip.label))
}
depths <- seq(0.3,0.9, 0.01)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
class(trees)
length(trees)
test <- bind.tip(trees[[1]], where=which(trees[[1]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[1]]$edge.length[which(trees[[1]]$edge[,2]==which(trees[[1]]$tip.label=="lepidocarpodendron"))])
plot(test)
test <- bind.tip(trees[[2]], where=which(trees[[1]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[1]]$edge.length[which(trees[[1]]$edge[,2]==which(trees[[1]]$tip.label=="lepidocarpodendron"))])
test <- bind.tip(trees[[60]], where=which(trees[[60]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[60]]$edge.length[which(trees[[60]]$edge[,2]==which(trees[[60]]$tip.label=="lepidocarpodendron"))])
length(trees)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
trees[[1]]$tip.label
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="Thylacinidae_Thylacinus_cynocephalus",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
rm(at.depth, trees, position)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="Thylacinidae_Thylacinus_cynocephalus",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
trees
trees
trees[[1]]
trees=astral.raxml
trees
trees[[1]]
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="Thylacinidae_Thylacinus_cynocephalus",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
depths <- seq(0.3,0.9, 0.01)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="Thylacinidae_Thylacinus_cynocephalus",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
k
rm(k)
for (k in 1:length(trees)){
at.depth <- sample(depths, 1)
trees[[k]] <- bind.tip(trees[[k]], where=which(trees[[k]]$tip.label=="lepidocarpodendron"),
tip.label="Thylacinidae_Thylacinus_cynocephalus",
position=at.depth*trees[[k]]$edge.length[which(trees[[k]]$edge[,2]==which(trees[[k]]$tip.label=="lepidocarpodendron"))])
}
test <- bind.tip(trees[[60]], where=which(trees[[60]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[60]]$edge.length[which(trees[[60]]$edge[,2]==which(trees[[60]]$tip.label=="lepidocarpodendron"))])
test
test <-
for( j in 1:length(trees)) {
bind.tip(trees[[j]], where=which(trees[[j]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[j]]$edge.length[which(trees[[j]]$edge[,2]==which(trees[[j]]$tip.label=="lepidocarpodendron"))])
}
trees[[1]]
test <-
for( j in 1:length(trees)) {
stank[[j]] <- bind.tip(trees[[j]], where=which(trees[[j]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[j]]$edge.length[which(trees[[j]]$edge[,2]==which(trees[[j]]$tip.label=="lepidocarpodendron"))])
}
test <-
stank <- NULL
for( j in 1:length(trees)) {
stank[[j]] <- bind.tip(trees[[j]], where=which(trees[[j]]$tip.label=="lepidocarpodendron"),
tip.label="burchelli",
position=at.depth*trees[[j]]$edge.length[which(trees[[j]]$edge[,2]==which(trees[[j]]$tip.label=="lepidocarpodendron"))])
}
stank[[1]]
class(stank)
class(stank) <- "multiPhylo"
astral.raxml[[1]]
write.nexus(stank, "/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.ASTRAL.RAxML.trees")
write.nexus(stank, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Protea.ASTRAL.RAxML.trees")
datum
trees = stank
dataz
data <- adjust_data(trees[[1]], dataz)
trees <- drop.tip(stank, "burchelli")
trees <- lapply(stank, drop.tip, "burchelli")
data <- adjust_data(trees[[1]], dataz)
shift.fit <- estimate_shift_configuration(data$tree, data$Y, nCores=8, quietly=F, criterion="pBIC") # if you want to do only a single trait, 'data$Y[,x]'
plot(shift.fit, cex=0.8)
par(mar=c(1,1,1,1))
plot(shift.fit, cex=0.8)
plot(shift.fit, cex=0.8)
par(mar=c(1,1,1,1))
plot(shift.fit, cex=0.8)
shift.fit
shift.fit$optima
shift.fit$edge.optima
shift.fit$l1ou.options
shift.fit$profile
shift.fit
no.shifts
densityplot(no.shifts[,2])
shift.positions.list
shift.positions.by.tree
l1ou.res
shifted.tips
method
astral.raxml
astral.raxml[[1]]
raxml.concat
raxml.concat[[1]]
starbeast
starbeast[[1]]
starbeast[[1]]$tip.label == astral.raxml[[1]]$tip.label
sort(starbeast[[1]]$tip.label) == sort(astral.raxml[[1]]$tip.label)
deez <- NULL
deez <- sort(starbeast[[1]]$tip.label)
deez
deez <- as.data.frame(sort(starbeast[[1]]$tip.label))
deez[[,2]] <- as.data.frame(sort(astral.raxml[[1]]$tip.label))
deez[,2] <- as.data.frame(sort(astral.raxml[[1]]$tip.label))
astralbeast
length(astralbeast[[1]])
astralbeast[[1]]
starbeast[[1]]
ab <- starbeast[[1]]
sb <- starbeast[[1]]
ab <- astralbeast[[1]]
inboth <- intersect(as$tip.label, bs$tip.label)
inboth <- intersect(as$tip.label, sb$tip.label)
as$tip.label
sb$tip.label
as <- astralbeast[[1]]
inboth <- intersect(as$tip.label, sb$tip.label)
inboth
pw.as <- cophenetic.phylo(as)
pw.as <- cophenetic.phylo(as)
pw.sb <- cophenetic.phylo(sb)
ucomb <-  combn(inboth, m = 2)
ucomb
dist_as <- rep(NA, ncol(ucomb))
dist_bs <- rep(NA, ncol(ucomb))
dist_ahe
dff <- data.frame(species1 = ucomb[1,], species2 = ucomb[2,] , dist_as, dist_sb, stringsAsFactors=F)
dist_sb <- rep(NA, ncol(ucomb))
dff <- data.frame(species1 = ucomb[1,], species2 = ucomb[2,] , dist_as, dist_sb, stringsAsFactors=F)
for (ii in 1:nrow(dff)){
dff$dist_as[ii] <- pw.ahe[ dff$species1[ii], dff$species2[ii] ]
dff$dist_sb[ii] <- pw.nd4[ dff$species1[ii], dff$species2[ii] ]
}
for (ii in 1:nrow(dff)){
dff$dist_as[ii] <- pw.as[ dff$species1[ii], dff$species2[ii] ]
dff$dist_sb[ii] <- pw.sb[ dff$species1[ii], dff$species2[ii] ]
}
plot(dff$dist_as, dff$dist_sb)
plot(dff$dist_as, dff$dist_sb)
factor <- (as.data.frame(dff$dist_as/dff$dist_sb))
difference <- as.data.frame(dff$dist_sb - dff$dist_as)
dff <- cbind(dff, factor[,1])
dff <- cbind(dff, difference)
densityplot(dff[,5])
p <- ggplot(dff, aes(group, `factor[, 1]`))
library(ggplot2)
p <- ggplot(dff, aes(group, `factor[, 1]`))
p + geom_violin() + geom_jitter(height = 0, width = 0.1) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
dff$group <- "test"
p + geom_violin() + geom_jitter(height = 0, width = 0.1) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point(alpha=0.25, color="red") + # change to 0.25 and "red" for time plots
stat_smooth(method = "lm", col = "black") + # change to "black" for time plots
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fit <- lm(dist_nd4 ~ dist_ahe, data=dff) # change this according to the parameter you simulated
fit <- lm(dist_as ~ dist_sb, data=dff) # change this according to the parameter you simulated
plot.fit <- (ggplotRegression(fit))
plot.fit + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
fit
dff
max(nodeHeights(astralbeast[[1]]))
max(nodeHeights(starbeast[[1]]))
nodeHeights(astralbeast[[1]])
test <- as
test
max(nodeHeights(as))
plot(as)
test <- rescale.phylo(as, depth=1)
library(geiger)
test <- rescale.phylo(as, depth=1)
test <- rescale(as, depth=1)
test
plot(test)
max(nodeHeights(test))
test <- scale(as, "depth", 1)
test <- geiger::scale(as, "depth", 1)
test <- rescale(as, "depth", 1)
plot(test)
max(nodeHeights(test))
as <- lapply(astralbeast, rescale, "depth", 1)
class(as)
class(as) <- "multiPhylo"
max(nodeHeights(astralbeast))
lapply(astralbeast, max(nodeHeights),)
lapply(astralbeast, max, nodeHeights
)
max(nodeHeights(astralbeast[[1]]))
max(nodeHeights(astralbeast[[2]]))
max(nodeHeights(astralbeast[[3]]))
max(nodeHeights(as[[3]]))
max(nodeHeights(as[[4]]))
as <- lapply(astralbeast, rescale, "depth", 1); sb <- lapply(starbeast, rescale, "depth", 1)
class(as) <- "multiPhylo"; class(sb) <- "multiPhylo"
astralbeast
starbeast
species1
dff
dff <- NULL
for (k in 1:1) {
dff <- NULL
in1 <- sb[[k]]
in2 <- as[[k]]
inboth <- intersect(in1$tip.label, in2$tip.label)
# Get the pairwise distance matrices
pw.in1 <- cophenetic.phylo(in1)
pw.in2 <- cophenetic.phylo(in2)
# now: compare pairwise distances from these 2 trees
#   the complication is that they have different sets of taxa
# Get unique combinations of this set:
ucomb <-  combn(inboth, m = 2)
# make vectors to hold results
dist_1 <- rep(NA, ncol(ucomb))
dist_2 <- rep(NA, ncol(ucomb))
dff <- data.frame(species1 = ucomb[1,], species2 = ucomb[2,] , dist_1, dist_2, stringsAsFactors=F)
# fill in the blanks....
for (ii in 1:nrow(dff)){
dff$dist_1[ii] <- pw.in1[ dff$species1[ii], dff$species2[ii] ]
dff$dist_2[ii] <- pw.in2[ dff$species1[ii], dff$species2[ii] ]
}
}
dff
total.dff <- NULL
total.dff <- NULL
for (k in 1:length(starbeast)) {
dff <- NULL
in1 <- sb[[k]]
in2 <- as[[k]]
inboth <- intersect(in1$tip.label, in2$tip.label)
# Get the pairwise distance matrices
pw.in1 <- cophenetic.phylo(in1)
pw.in2 <- cophenetic.phylo(in2)
# now: compare pairwise distances from these 2 trees
#   the complication is that they have different sets of taxa
# Get unique combinations of this set:
ucomb <-  combn(inboth, m = 2)
# make vectors to hold results
dist_1 <- rep(NA, ncol(ucomb))
dist_2 <- rep(NA, ncol(ucomb))
dff <- data.frame(species1 = ucomb[1,], species2 = ucomb[2,] , dist_1, dist_2, stringsAsFactors=F)
# fill in the blanks....
for (ii in 1:nrow(dff)){
dff$dist_1[ii] <- pw.in1[ dff$species1[ii], dff$species2[ii] ]
dff$dist_2[ii] <- pw.in2[ dff$species1[ii], dff$species2[ii] ]
}
total.dff <- rbind.data.frame(total.dff, dff)
}
total.dff
fit <- lm(dist_1 ~ dist_2, data=total.dff) # change this according to the parameter you simulated
plot.fit <- (ggplotRegression(fit))
plot.fit + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
devtools::install_github("Caetanods/ratematrix", build_vignettes = TRUE)
library(ratematrix)
data(anoles)
library(ratematrix)
data(anoles)
anoles
library(phytools)
trees = read.nexus("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Raw_Trees/T222_concatenated_Ingroup.trimmed.trees") #pick out our set of posterior trees
trees = read.nexus("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/T222_concatenated_Ingroup.trimmed.trees") #pick out our set of posterior trees
trees
trees <- trees[[1:100]]
trees
trees[1]
trees[1:100]
trees[[1:100]]
test <- trees[1:100]
test
test[[1]]
test[[2]]
trees <- trees[1:100]
as.data.frame(sort(trees[[1]]$tip.label))
write.nexus(trees, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Elapidae.RAxML.Concat.trees")
raxml.concat <- read.tree ("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Raw_Trees/Marsupials_RAxML_concatenated_100.trees")
raxml.concat
trees = raxml.concat
raxml <- lapply(trees, root, c("Didelphidae_Didelphis_virginiana", "Marmosidae_Monodelphis_domestica"), resolve.root=T)
plot(raxml[[1]])
class(raxml)<-"multiPhylo"
trees = raxml
for (k in 1:length(trees)) {
tree <- chronos(trees[[k]], model="relaxed", lambda=0) # set lambda=1 for a consistent transformation
#tree <- root(tree, outgroup="Laticauda_colubrina", resolve.root=T)
write.tree(tree, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials_RAxML_Concat.trees", append=T)
}
trees = read.nexus("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials.RAxML.Concat.trees") #pick out our set of posterior trees
for (k in 1:length(trees)) {
tree <- chronos(trees[[k]], model="relaxed", lambda=0) # set lambda=1 for a consistent transformation
#tree <- root(tree, outgroup="Laticauda_colubrina", resolve.root=T)
write.nexus(tree, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials_RAxML_Concat.trees", append=T)
}
trees = read.nexus("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials.RAxML.Concat.trees") #pick out our set of posterior trees
trees = read.tree("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials.RAxML.Concat.trees") #pick out our set of posterior trees
write.nexus(trees, file="/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials.RAxML.Concat.trees")
trees = read.nexus("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Final_Trees/Marsupials.RAxML.Concat.trees") #pick out our set of posterior trees
plot(trees[[1]])
datum <- read.csv("/Users/Ian/Google.Drive/R.Analyses/Macro_Inference/Trait_Data/Marsupials.RAW.csv", header=T, row.names=1)
datum <- log(datum) # quickly log the raw values (if not already done!)
total.data <- NULL # create a frame for holding all our residuals
datum
total.data <- NULL # create a frame for holding all our residuals
for (b in 1:length(trees)) {
resid.data <- NULL # temporary object
resids <- phyl.resid(trees[[b]], datum$M.avgBL, datum[,c("Brain.size", "M.avgWT")]) # regress brain size and weight against body length
resid.data <- cbind(resid.data, datum$M.avgBL); resid.data <- cbind(resid.data, resids$resid)
colnames(resid.data) <- c("BodyLength", "BrainSize", "Weight")
total.data[[b]] <- resid.data
}
